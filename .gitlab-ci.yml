stages:
  - build
  - package

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
  - echo TEST 243
  
compile:
  image: crosscloudci/debian-openjdk
  stage: build
  # cache:
  #   paths:
  #   - docker-17.03.0-ce.tgz
  #   - node-v6.10.2-linux-x64.tar.xz

  variables:
    CI_TERRIBLENESS: 30.seconds

  script:
    - set -x
    - if [ ! -f docker-17.03.0-ce.tgz ]; then
          curl -sLO https://get.docker.com/builds/Linux/x86_64/docker-17.03.0-ce.tgz ;
        fi
    - tar -xz -C /tmp -f docker-17.03.0-ce.tgz
    - mv /tmp/docker/* /usr/bin
    - if [ ! -f node-v6.10.2-linux-x64.tar.xz ]; then
          curl -sLO https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz ;
        fi
    - tar -xf node-v6.10.2-linux-x64.tar.xz
    - cp -a node-v6.10.2-linux-x64/* /usr/
    - sh -x ci/update.sh
    - set -x
    - echo "Install Node.js and npm dependencies"
    - pushd $(pwd)/admin/src/main/resources/io/buoyant/admin/ ; npm install ; popd
    - echo "Run npm tests"
    - pushd $(pwd)/admin/src/main/resources/io/buoyant/admin/ ;  npm run eslint ; npm test ; popd 
    - echo "Run unit and e2e tests"
    # - sh -x ci/test.sh 
    # - set -x ci/coverage-publish.sh || true
    - echo "Publish"
    # - DOCKER_TARGET="dockerBuildAndPush"
    - DOCKER_TARGET="docker"
    # - ./sbt "set Base.dockerTag in (linkerd, Bundle) := \"${IMAGE_TAG}\"" "linkerd/bundle:${DOCKER_TARGET}" \
            # "set Base.dockerTag in (namerd, Bundle) := \"${IMAGE_TAG}\"" "namerd/bundle:${DOCKER_TARGET}" \
            # "set Base.dockerTag in (namerd, Dcos) := \"dcos-${IMAGE_TAG}\"" "namerd/dcos:${DOCKER_TARGET}"
    - ./sbt 'set imageNames in docker in (linkerd, Bundle) += ImageName("registry.cncf.ci/linkerd/linkerd/linkerd:1.3.1")' \ "linkerd/docker"
    - ./sbt 'set imageNames in docker in (namerd, Bundle) += ImageName("registry.cncf.ci/linkerd/linkerd/namerd:1.3.1")' \ "namerd/docker"
    - ./sbt 'set imageNames in docker in (namerd, Dcos) += ImageName("registry.cncf.ci/linkerd/linkerd/namerd-dcos:1.3.1")' \ "namerd/dcos:docker"

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 4 weeks
    paths:
      - "admin/src/main/resources/io/buoyant/admin/node_modules"

container:
  stage: package
  image: crosscloudci/debian-docker
  script:
    - IMAGE_TAG=${CI_COMMIT_SHA_SHORT}
    - docker tag registry.cncf.ci/linkerd/linkerd/linkerd:1.3.1 "$CI_REGISTRY_IMAGE"/linkerd:"$IMAGE_TAG"
    - docker tag registry.cncf.ci/linkerd/linkerd/namerd:1.3.1 "$CI_REGISTRY_IMAGE"/namerd:"$IMAGE_TAG"
    - docker tag registry.cncf.ci/linkerd/linkerd/namerd-dcos:1.3.1 "$CI_REGISTRY_IMAGE"/namerd-dcos:"$IMAGE_TAG"
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE"/linkerd:"$IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/namerd:"$IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/namerd-dcos:"$IMAGE_TAG"
    - touch release.env
    - echo export IMAGE_ARGS="--set image=$CI_REGISTRY_IMAGE"/linkerd:"$IMAGE_TAG" | tee release.env
    - cat release.env

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 4 weeks
    paths:
      - "release.env"
